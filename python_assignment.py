# -*- coding: utf-8 -*-
"""python Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YhEQPzWnb48TqNUjHoo5Wq5DTTSyd-E6

## Python Basic Programming Exercises

# Q1: What is the output of following expression

*   List item
*   List item



1.   List item
2.   List item


    5 + 4 * 9 % (3 + 1) / 6 - 1
"""

a=5+4*9%(3+1)/6-1
print(a)

"""[link text](https://)Q2: Write a program to check if a Number is Odd or Even.

*   List item
*   List item

Take number as a input from user at runtime.
"""

a=int(input("enter a number"))
if a%2==0:
  print(f"{a} is even")
else:
  print(f"{a} is odd")

"""Q3: Write a program to display the multiplication table by taking a number as input.
    [Hint : Use print statement inside of a loop]
"""

num=int(input("enter a num"))
for i in range(1,11):
  print(f"{num} x {i}={num*i}")

"""Q4: Write a program which will find all numbers between 2000 and 3200 which are divisible by 7
    but are not a multiple of 5.

Note: The numbers obtained should be printed in a comma-separated sequence on a single line.
"""

result = []
for num in range(2000, 3201):
  if num % 7 == 0 and num % 5 != 0:
    result.append(str(num))
print(",".join(result))

"""Q5: Count the elements of each datatype inside the list and display in output
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

data = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
datatype_count = {}
for item in data:
    dtype = type(item)
    datatype_count[dtype] = datatype_count.get(dtype, 0) + 1
for dtype, count in datatype_count.items():
    print(f"{dtype.__name__}: {count}")

"""Q6: Add all values from the list with numeric datatypes
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

data = [2, 3, 'py', '10', 1, 'SQL', 5, 5, True, 3, 'John', None, 7]
total = sum(item for item in data
            if isinstance
             (item, (int, float, bool)))
print("Sum of numeric values:", total)

"""Q7: Concat all str datatypes with hyphen as a delimiter
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]
"""

data = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None,7]
result = '-'.join(item for item in data if isinstance(item, str))
print("Concatenated string:", result)

"""Q8 Get only odd numbers from the following list and store the numbers in new list
    li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]

    i. Use loops to get the answer
   ii. Use list comprehensions
  iii. Use lambda function with filter
"""

li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]
odd_numbers_loops = []
for number in li:
    if number % 2 != 0:
        odd_numbers_loops.append(number)
odd_numbers_comprehension = [number for number in li if number % 2 != 0]
odd_numbers_filter = list(filter(lambda x: x % 2 != 0, li))
print("Odd numbers (using loops):", odd_numbers_loops)
print("Odd numbers (using list comprehension):", odd_numbers_comprehension)
print("Odd numbers (using filter):", odd_numbers_filter)

"""Q9: Write an udf to calculate the area of different shapes

Take shape and dimensions as arguments to udf as follows :

1. square which has side
2. rectangle which has length and width
3. circle which has radius

The shape should be a positional argument and it's dimensions are taken as kwargs

Perform proper validation for the user inputs and then calculate area.

E.g. if shape is square, ensure kwargs has "side" and if so, then you may return the area, else display appropriate error message like "Please enter 'side' for a square"
"""

import math

def calculate_area(shape, **kwargs):
    if shape == 'square':
        if 'side' in kwargs:
            side = kwargs['side']
            if side <= 0:
                return "Side length must be positive."
            return side ** 2
        else:
            return "Please enter 'side' for a square."

    elif shape == 'rectangle':
        if 'length' in kwargs and 'width' in kwargs:
            length = kwargs['length']
            width = kwargs['width']
            if length <= 0 or width <= 0:
                return "Length and width must be positive."
            return length * width
        else:
            return "Please enter 'length' and 'width' for a rectangle."

    elif shape == 'circle':
        if 'radius' in kwargs:
            radius = kwargs['radius']
            if radius <= 0:
                return "Radius must be positive."
            return math.pi * (radius ** 2)
        else:
            return "Please enter 'radius' for a circle."

    else:
        return "Unsupported shape. Please use 'square', 'rectangle', or 'circle'."

# Example usage
print(calculate_area('square', side=5))        # 25
print(calculate_area('rectangle', length=4, width=3))  # 12
print(calculate_area('circle', radius=3))      # 28.274333882308138
print(calculate_area('square'))                  # Please enter 'side' for a square.
print(calculate_area('rectangle', length=4))    # Please enter 'length' and 'width' for a rectangle.
print(calculate_area('triangle'))                # Unsupported shape. Please use 'square', 'rectangle', or 'circle'.

"""Q10: write a UDF to check if a number is prime or not."""

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
            return True
number = 17
if is_prime(number):
    print(f"{number} is a prime number.")
else:
    print(f"{number} is not a prime number.")

"""Q11. Write a program that takes a string and returns reversed string. i.e. if input is "abcd123" output should be "321dcba"
"""

def reverse_string(s):
    return s[::-1]
input_string = "abcd123"
output_string = reverse_string(input_string)
print("Reversed string:", output_string)

